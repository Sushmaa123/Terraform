To create basic s3-bucket
-------------------------
provider "aws" {
  region = "us-east-1"  # Replace with your desired AWS region
}

resource "aws_s3_bucket" "example_bucket" {
  bucket = "example-bucket-name"  # Replace with your desired bucket name
  
  versioning {
    enabled = true  # Enable versioning for the bucket
  }

  tags = {
    Name        = "Example Bucket"

  }
}

To upload objects inside s3 bucket
------------------------------------
resource "aws_s3_object" "example_object" {
  bucket = aws_s3_bucket.example_bucket.bucket
  key    = "example.txt"                  # The key (name) of the object in the bucket
  source = "./example.txt"     # Path to the file on your local machine
  acl    = "private"                      # Set ACL for the uploaded object
}


To upload multiple objects:
---------------------------
variable "files" {
  type = map(string)
  default = {
    "file1.txt" = "./file1.txt"
    "file2.txt" = "./file2.txt"
  }
}
resource "aws_s3_object" "multiple_files" {
  for_each = var.files
  bucket = aws_s3_bucket.example_bucket.bucket
  key    = each.key
  source = each.value
  acl    = "private"
}

 
To delete the objects in s3 bucket
-----------------------------------
remove or comment out the aws_s3_object resource in your Terraform code
then run terraform apply

to delete multiple objects:
---------------------------
variable "files" {
  default = []
}
then run terraform validate and terraform apply



To create s3 static web hosting and to upload object in it
------------------------------------------------------------

provider "aws" {
  region = "us-east-1"  # Replace with your desired AWS region
}

resource "aws_s3_bucket" "static_website" {
  bucket = "example-static-website-bucket"  # Replace with your desired bucket name
  acl    = "public-read"                    # Set ACL to allow public read access

  website {
    index_document = "index.html"           # Specify the index document for the website
    error_document = "error.html"           # Specify the error document for the website
  }

  tags = {
    Name        = "Example Static Website Bucket"
    
  }
}

# Upload index.html and error.html to the S3 bucket
resource "aws_s3_bucket_object" "index_html" {
  bucket = aws_s3_bucket.static_website.bucket
  key    = "index.html"
  source = "path/to/local/index.html"  # Replace with the path to your local index.html file
  acl    = "public-read"              # Set ACL to allow public read access
}

To create bucket policy for s3 static web hosting
-----------------------------------------------------
# # Allow public access by modifying Block Public Access settings
resource "aws_s3_bucket_public_access_block" "static_website" {
  bucket                  = var.bucket_name
  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

# Attach a bucket policy to allow public read access
resource "aws_s3_bucket_policy" "static_website_policy" {
  bucket = var.bucket_name

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "PublicReadGetObject"
        Effect    = "Allow"
        Principal = "*"
        Action    = "s3:GetObject"
        Resource  = "arn:aws:s3:::${var.bucket_name}/*"
      }
    ]
  })
}

To upload objects into static-website bucket:
---------------------------------------------
data "local_file" "web_files" {
  for_each = fileset(var.source_dir, "**")
  filename = "${var.source_dir}/${each.value}"
}

# Upload all files to S3
resource "aws_s3_object" "web_app_files" {
  for_each   = data.local_file.web_files
  bucket     = var.bucket_name
  key        = each.key
  source     = data.local_file.web_files[each.key].filename
  content_type = lookup(
    {
      "html" = "text/html"
      "css"  = "text/css"
      "js"   = "application/javascript"
      "png"  = "image/png"
      "jpg"  = "image/jpeg"
    },
    split(".", each.value)[length(split(".", each.value)) - 1],
    "application/octet-stream"
  ) # Auto-detect MIME type
}

TO create multiple s3 buckets
-------------------------------
variable "s3_bucket_names" {
  type = list
  default = ["bucket.dev", "bucket.test", "bucket.prod"]
}


resource "aws_s3_bucket" "rough-buckets" {
  count = length(var.s3_bucket_names)
  bucket = var.s3_bucket_names[count.index]
  acl           = "private"
  force_destroy = true
}

To delete the s3 buckets:
-------------------------
1.comment the "aws_s3_bucket" resource block
2.then run terraform apply to delete the buckets

example: 
#resource "aws_s3_bucket" "rough-buckets" {
  #count = length(var.s3_bucket_names)
  #bucket = var.s3_bucket_names[count.index]
  #acl           = "private"
  #force_destroy = true
#}

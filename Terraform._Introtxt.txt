Terraform:
----------
-->Terraform is an Infrastructure as Code (IaC) tool by HashiCorp that allows you to define, provision, and manage cloud 
   resources using a declarative configuration language.
-->It enables developers and system administrators to define and provision infrastructure using a high-level configuration language 
   known as HashiCorp Configuration Language (HCL) or JSON. 
-->Terraform is cloud-agnostic, allowing users to manage infrastructure on multiple cloud providers like AWS, Azure, GCP, 
   and on-premises solutions such as VMware.

History of Terraform:
---------------------
-->Terraform was introduced in 2014 by HashiCorp to address the challenges of managing complex cloud infrastructure. 
   HashiCorp, already known for tools like Vagrant, aimed to provide a universal, declarative tool for infrastructure management.
-->In 2022 Terraform became a leading IaC tool, competing with other tools like AWS CloudFormation and Ansible.
-->Today Terraform is widely used in DevOps practices and CI/CD pipelines to automate infrastructure management.

Key Features of Terraform:
--------------------------
1. Declarative Configuration:
-->You describe the desired state of your infrastructure, and Terraform ensures that the actual state matches it.
   Example: If you declare a Virtual Machine, Terraform provisions it automatically.
2. Multi-Cloud Support:
-->Manage infrastructure across multiple cloud providers like AWS, Azure, Google Cloud, Kubernetes, and 
   more using a single configuration language.
3. Infrastructure as Code:
-->Store infrastructure definitions as code in .tf files, enabling version control and collaboration.
   This approach brings software engineering best practices, like testing and code reviews, to infrastructure management.
4. Execution Plans:
-->Terraform generates an execution plan (terraform plan) before applying changes, allowing users to review what actions it will take.
5. State Management:
-->Terraform maintains a state file (terraform.tfstate) to keep track of your infrastructure. This ensures that Terraform knows the 
   current status of the resources it manages.
   Supports remote state storage for team collaboration.
6. Provider Ecosystem:
-->Providers are plugins that allow Terraform to interact with APIs of cloud platforms or services. Terraform has official providers 
   (e.g., AWS, Azure) and community-contributed ones.
7.Open Source and Community Support:
-->Terraform is open-source model fosters a rich community of contributors and an extensive library of prebuilt modules.
   Terraform was previously licensed under the Mozilla Public License v2.0 (MPL 2.0), which is an open-source license. But now terraform is licensed
   under Business Source License[BSL] which is not open-source.

Alternative tools:
-----------------
1.Ansible
2.Pulumi
3.Saltstack
4.AWS CloudFormation

Advantages of Terraform:
------------------------
1.Cloud-Agnostic: Write configurations once and deploy them to multiple cloud providers.
2.Consistency: Use the same configuration files across development, staging, and production.
3.Scalability: Manage infrastructure at any scale, from a single instance to entire data centers.
4.Collaboration: Teams can share state files and configurations using remote backends.

Key Concepts in Terraform:
---------------------------
1.Provider: Specifies the cloud service (e.g., AWS, Azure).
2.Resources: Represents specific services (e.g., EC2, S3).
3.Variables: Allow parameterization of configurations.
4.State: Maintains the current state of your infrastructure.

Install Terraform:
-------------------
1.go to the below website and select windows amd64 to download:
-->https://developer.hashicorp.com/terraform/install?product_intent=terraform
2.After downloading extract the files in your desired location

Setup AWS CLI:
--------------
1.Download and run the AWS CLI MSI installer for Windows (64-bit) run the below command in cmd or powershell:
-->msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi
2.To confirm the installation
--> aws --version
3.when you run aws --version it should prompt the below output:
-->aws-cli/2.19.1 Python/3.11.6 Windows/10 exe/AMD64 prompt/off
4.Create a IAM user with secret key and access key on AWS
5.Open git bash and run the below cmd to configure aws locally:
-->aws configure
example: aws configure
         AWS Access Key ID [None]:
         AWS Secret Access Key [None]:
         Default region name [None]:
         Default output format [None]:
